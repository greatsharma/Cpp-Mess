test_one
{
    // for undirected graph.
    int no_v = 7;
    Graph graph(no_v);
    graph.addEdge(0, 4);
    graph.addEdge(4, 0);
    graph.addEdge(0, 2);
    graph.addEdge(2, 0);
    graph.addEdge(0, 3);
    graph.addEdge(3, 0);
    graph.addEdge(0, 5);
    graph.addEdge(5, 0);
    graph.addEdge(0, 6);
    graph.addEdge(6, 0);
    graph.addEdge(1, 4);
    graph.addEdge(4, 1);
    graph.addEdge(3, 4);
    graph.addEdge(4, 3);
    graph.addEdge(5, 4);
    graph.addEdge(4, 5);
    graph.addEdge(3, 5);
    graph.addEdge(5, 3);
    graph.addEdge(6, 1);
    graph.addEdge(1, 6);
    graph.addEdge(6, 2);
    graph.addEdge(2, 6);

    show_graph(graph);
    int src = 5;

    int level[no_v], vParent[no_v];
    for (int i = 0; i < no_v; i++)
    {
        level[i] = INFINITY;
        vParent[i] = INFINITY;
    }

    cout << "\nBFS " << INFINITY << " represents not reachable: ";
    BFS(graph, src, level);
    for (int i = 0; i < no_v; i++)
    {
        cout << "\n"
             << level[i];
    }

    cout << "\n\nDFS " << INFINITY << " represents not reachable: ";
    DFS(graph, src, vParent);
    for (int i = 0; i < no_v; i++)
    {
        cout << "\n"
             << vParent[i];
    }

    if (bipartite(graph))
        cout << "\n\nis bipartite";
    else
        cout << "\n\nnot bipartite";
}

test_two
{
    // for undirected graph.
    int no_v = 7;
    Graph graph(no_v);
    graph.addEdge(0, 1);
    graph.addEdge(1, 0);
    graph.addEdge(0, 2);
    graph.addEdge(2, 0);
    graph.addEdge(2, 3);
    graph.addEdge(3, 2);
    graph.addEdge(1, 3);
    graph.addEdge(3, 1);
    graph.addEdge(4, 6);
    graph.addEdge(6, 4);
    graph.addEdge(5, 4);
    graph.addEdge(4, 5);
    graph.addEdge(6, 5);
    graph.addEdge(5, 6);

    show_graph(graph);
    int src = 0;

    int level[no_v], vParent[no_v];
    for (int i = 0; i < no_v; i++)
    {
        level[i] = INFINITY;
        vParent[i] = INFINITY;
    }

    cout << "\nBFS " << INFINITY << " represents not reachable: ";
    BFS(graph, src, level);
    for (int i = 0; i < no_v; i++)
    {
        cout << "\n"
             << level[i];
    }

    cout << "\n\nDFS " << INFINITY << " represents not reachable: ";
    DFS(graph, src, vParent);
    for (int i = 0; i < no_v; i++)
    {
        cout << "\n"
             << vParent[i];
    }

    if (bipartite(graph))
        cout << "\n\nis bipartite";
    else
        cout << "\n\nnot bipartite";
}

#endif